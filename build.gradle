buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/'}
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'maven-publish'

apply plugin: 'org.spongepowered.mixin' // Mixins

version = "${mc_version}-${mod_version}"
if ("${pre}" == "true") {
    version += "-pre"
}

group = 'frostygames0.elementalamulets' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'elementalamulets'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 17 to end users, so your mod should target Java 17.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.18.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--username', 'Dev####'

            mods {
                elementalamulets {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runServer')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                elementalamulets {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'elementalamulets', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                elementalamulets {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://maven.theillusivec4.top/"}
    maven { url 'https://maven.blamejared.com' }
    maven {
        // location of the maven that hosts JEI files
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name "ModMaven"
        url "https://modmaven.k-4u.nl"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.0.2'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Curios API
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}:api")

    //Patchouli API
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // Just Enough Items
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

    // CraftTweaker
    compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-forge-${crafttweaker_version}")
}

mixin {
    add sourceSets.main, 'mixins.elementalamulets.refmap.json'
    config 'mixins.elementalamulets.json'

    debug.verbose = true
    debug.export = true
}

processResources {
    exclude '.cache' // Removes .cache from jar
}

jar {
    manifest {
        attributes([
            "Specification-Title": "elementalamulets",
            "Specification-Vendor": "Frostygames0",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Frostygames0",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


